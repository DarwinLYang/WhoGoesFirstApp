package com.purplishsocks.whofirst;

import com.purplishsocks.whofirst.MainActivity.MyGestureListener;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.GestureDetectorCompat;
import android.content.Intent;
import android.os.Bundle;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.Toast;

public class SettingsActivity extends FragmentActivity {

	private SettingsFragment SettFrag;
	private GestureDetectorCompat mDetector;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_settings);
		mDetector = new GestureDetectorCompat(this, new MyGestureListener());

		if (savedInstanceState == null) {
			SettFrag = new SettingsFragment();
			getSupportFragmentManager().beginTransaction()
					.add(R.id.settingsContainer, SettFrag).commit();
		}

	}

	public static class SettingsFragment extends Fragment {

		public SettingsFragment() {
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_settings,
					container, false);
			return rootView;
		}

		public String getText() {
			EditText mEdit = (EditText) getView()
					.findViewById(R.id.theQuestion);
			return mEdit.getText().toString();
		}
	}

	public void submitQuestion(View view) {
		Intent i = new Intent(Intent.ACTION_SEND);
		i.setType("message/rfc822");
		i.putExtra(Intent.EXTRA_EMAIL,
				new String[] { "whogoesfirst@gmail.com" });
		i.putExtra(Intent.EXTRA_SUBJECT, "question suggestion");
		i.putExtra(Intent.EXTRA_TEXT, SettFrag.getText());
		try {
			startActivity(Intent.createChooser(i, "Send mail..."));
		} catch (android.content.ActivityNotFoundException ex) {
			Toast.makeText(this, "There are no email clients installed.",
					Toast.LENGTH_SHORT).show();
		}

	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		this.mDetector.onTouchEvent(event);
		return super.onTouchEvent(event);
	}

	class MyGestureListener extends GestureDetector.SimpleOnGestureListener {

		private static final int SWIPE_THRESHOLD = 100;
		private static final int SWIPE_VELOCITY_THRESHOLD = 100;

		@Override
		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
				float velocityY) {
			boolean result = false;
			try {
				float diffY = e2.getY() - e1.getY();
				float diffX = e2.getX() - e1.getX();
				if (Math.abs(diffX) > Math.abs(diffY)) {
					if (Math.abs(diffX) > SWIPE_THRESHOLD
							&& Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
						if (diffX > 0)
							onBackPressed();
					}
				}
			} catch (Exception exception) {
				exception.printStackTrace();
			}
			return result;
		}
	}

	@Override
	public void onBackPressed() {

		this.finish();
		overridePendingTransition(R.anim.right_slide_in, R.anim.right_slide_out);
	}

}
